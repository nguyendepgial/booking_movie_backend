<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Showtime;
use App\Models\Booking;
use Illuminate\Support\Facades\DB;

class ShowtimeController extends Controller
{
    /**
     * üìΩ L·∫•y danh s√°ch su·∫•t chi·∫øu theo phim (ch·ªâ l·∫•y su·∫•t chi·∫øu ch∆∞a k·∫øt th√∫c)
     */
    public function getShowtimesByMovie($movie_id)
    {
        $showtimes = Showtime::where('movie_id', $movie_id)
            ->whereDate('show_date', '>=', now()->toDateString()) // Ch·ªâ l·∫•y su·∫•t chi·∫øu t·ª´ h√¥m nay tr·ªü ƒëi
            ->with(['cinema', 'movie'])
            ->get();

        if ($showtimes->isEmpty()) {
            return response()->json(['error' => 'Kh√¥ng c√≥ su·∫•t chi·∫øu cho phim n√†y'], 404);
        }

        return response()->json(['showtimes' => $showtimes], 200);
    }

    /**
     * üé• L·∫•y danh s√°ch su·∫•t chi·∫øu theo r·∫°p
     */
    public function getShowtimesByCinema($cinema_id)
    {
        $showtimes = Showtime::where('cinema_id', $cinema_id)
            ->whereDate('show_date', '>=', now()->toDateString()) // Ch·ªâ l·∫•y su·∫•t chi·∫øu t·ª´ h√¥m nay tr·ªü ƒëi
            ->with(['cinema', 'movie'])
            ->get();

        if ($showtimes->isEmpty()) {
            return response()->json(['error' => 'Kh√¥ng c√≥ su·∫•t chi·∫øu n√†o t·∫°i r·∫°p n√†y'], 404);
        }

        return response()->json(['showtimes' => $showtimes], 200);
    }

    /**
     * üìÖ L·∫•y danh s√°ch su·∫•t chi·∫øu theo ng√†y
     */
    public function getShowtimesByDate($date)
    {
        $showtimes = Showtime::whereDate('show_date', $date)
            ->with(['cinema', 'movie'])
            ->get();

        if ($showtimes->isEmpty()) {
            return response()->json(['error' => 'Kh√¥ng c√≥ su·∫•t chi·∫øu n√†o trong ng√†y n√†y'], 404);
        }

        return response()->json(['showtimes' => $showtimes], 200);
    }

    /**
     * üîç L·∫•y chi ti·∫øt m·ªôt su·∫•t chi·∫øu
     */
    public function getShowtimeDetail($id)
    {
        $showtime = Showtime::with(['cinema', 'movie'])->find($id);

        if (!$showtime) {
            return response()->json(['error' => 'Su·∫•t chi·∫øu kh√¥ng t·ªìn t·∫°i'], 404);
        }

        return response()->json(['showtime' => $showtime], 200);
    }

    /**
     * ‚ûï Th√™m su·∫•t chi·∫øu m·ªõi
     */
    public function createShowtime(Request $request)
    {
        $request->validate([
            'movie_id' => 'required|exists:movies,id',
            'cinema_id' => 'required|exists:cinemas,id',
            'show_date' => 'required|date',
            'show_time' => 'required|date_format:H:i', // Gi·ªØ format chu·∫©n H:i
            'ticket_price' => 'required|numeric|min:0'
        ]);

        $showtime = Showtime::create($request->all());

        return response()->json([
            'message' => 'Th√™m su·∫•t chi·∫øu th√†nh c√¥ng',
            'showtime' => $showtime
        ], 201);
    }

    /**
     * ‚úèÔ∏è C·∫≠p nh·∫≠t su·∫•t chi·∫øu (Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t su·∫•t chi·∫øu c√≥ v√© ƒë·∫∑t tr∆∞·ªõc)
     */
    public function updateShowtime(Request $request, $id)
    {
        $showtime = Showtime::find($id);

        if (!$showtime) {
            return response()->json(['error' => 'Su·∫•t chi·∫øu kh√¥ng t·ªìn t·∫°i'], 404);
        }

        // Ki·ªÉm tra xem su·∫•t chi·∫øu c√≥ v√© ƒë·∫∑t ch∆∞a
        $hasBookings = Booking::where('showtime_id', $id)->exists();
        if ($hasBookings) {
            return response()->json(['error' => 'Kh√¥ng th·ªÉ s·ª≠a su·∫•t chi·∫øu ƒë√£ c√≥ v√© ƒë·∫∑t tr∆∞·ªõc'], 400);
        }

        $request->validate([
            'movie_id' => 'sometimes|exists:movies,id',
            'cinema_id' => 'sometimes|exists:cinemas,id',
            'show_date' => 'sometimes|date',
            'show_time' => 'sometimes|date_format:H:i',
            'ticket_price' => 'sometimes|numeric|min:0'
        ]);

        $showtime->update($request->all());

        return response()->json([
            'message' => 'C·∫≠p nh·∫≠t su·∫•t chi·∫øu th√†nh c√¥ng',
            'showtime' => $showtime
        ], 200);
    }

    /**
     * üóë X√≥a su·∫•t chi·∫øu (Kh√¥ng th·ªÉ x√≥a su·∫•t chi·∫øu ƒë√£ c√≥ v√© ƒë·∫∑t tr∆∞·ªõc)
     */
    public function deleteShowtime($id)
    {
        $showtime = Showtime::find($id);

        if (!$showtime) {
            return response()->json(['error' => 'Su·∫•t chi·∫øu kh√¥ng t·ªìn t·∫°i'], 404);
        }

        // Ki·ªÉm tra xem su·∫•t chi·∫øu c√≥ v√© ƒë·∫∑t ch∆∞a
        $hasBookings = Booking::where('showtime_id', $id)->exists();
        if ($hasBookings) {
            return response()->json(['error' => 'Kh√¥ng th·ªÉ x√≥a su·∫•t chi·∫øu ƒë√£ c√≥ v√© ƒë·∫∑t tr∆∞·ªõc'], 400);
        }

        $showtime->delete();

        return response()->json([
            'message' => 'X√≥a su·∫•t chi·∫øu th√†nh c√¥ng'
        ], 200);
    }
}
